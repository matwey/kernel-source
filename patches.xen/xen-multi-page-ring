From: jbeulich@suse.com
Subject: extend base interfaces to support multi-page rings for frontend/backend communication
Patch-mainline: n/a

--- 12.3.orig/drivers/xen/blkback/interface.c	2013-06-24 16:44:08.000000000 +0200
+++ 12.3/drivers/xen/blkback/interface.c	2013-06-24 16:52:19.000000000 +0200
@@ -67,7 +67,7 @@ int blkif_map(blkif_t *blkif, grant_ref_
 	if (blkif->irq)
 		return 0;
 
-	area = xenbus_map_ring_valloc(blkif->be->dev, ring_ref);
+	area = xenbus_map_ring_valloc(blkif->be->dev, &ring_ref, 1);
 	if (IS_ERR(area))
 		return PTR_ERR(area);
 	blkif->blk_ring_area = area;
--- 12.3.orig/drivers/xen/blktap/interface.c	2012-04-04 10:14:34.000000000 +0200
+++ 12.3/drivers/xen/blktap/interface.c	2013-06-24 16:52:21.000000000 +0200
@@ -66,7 +66,7 @@ int tap_blkif_map(blkif_t *blkif, struct
 	if (blkif->irq)
 		return 0;
 
-	area = xenbus_map_ring_valloc(dev, ring_ref);
+	area = xenbus_map_ring_valloc(dev, &ring_ref, 1);
 	if (IS_ERR(area))
 		return PTR_ERR(area);
 	blkif->blk_ring_area = area;
--- 12.3.orig/drivers/xen/core/gnttab.c	2012-11-14 13:34:00.000000000 +0100
+++ 12.3/drivers/xen/core/gnttab.c	2012-03-12 14:04:06.000000000 +0100
@@ -300,6 +300,31 @@ void gnttab_end_foreign_access(grant_ref
 }
 EXPORT_SYMBOL_GPL(gnttab_end_foreign_access);
 
+void gnttab_multi_end_foreign_access(unsigned int nr, grant_ref_t refs[],
+				     struct page *pages[])
+{
+	for (; nr--; ++refs) {
+		if (*refs != GRANT_INVALID_REF) {
+			if (gnttab_end_foreign_access_ref(*refs))
+				put_free_entry(*refs);
+			else if (pages) {
+				gnttab_add_deferred(*refs, *pages);
+				*pages = NULL;
+			} else
+				gnttab_add_deferred(*refs, NULL);
+			*refs = GRANT_INVALID_REF;
+		}
+		if (pages) {
+			if (*pages) {
+				__free_page(*pages);
+				*pages = NULL;
+			}
+			++pages;
+		}
+	}
+}
+EXPORT_SYMBOL_GPL(gnttab_multi_end_foreign_access);
+
 int gnttab_grant_foreign_transfer(domid_t domid, unsigned long pfn)
 {
 	int ref;
--- 12.3.orig/drivers/xen/netback/interface.c	2013-02-18 12:17:23.000000000 +0100
+++ 12.3/drivers/xen/netback/interface.c	2013-02-18 12:21:15.000000000 +0100
@@ -262,11 +262,11 @@ int netif_map(struct backend_info *be, g
 	if (netif->irq)
 		return 0;
 
-	area = xenbus_map_ring_valloc(be->dev, tx_ring_ref);
+	area = xenbus_map_ring_valloc(be->dev, &tx_ring_ref, 1);
 	if (IS_ERR(area))
 		return PTR_ERR(area);
 	netif->tx_comms_area = area;
-	area = xenbus_map_ring_valloc(be->dev, rx_ring_ref);
+	area = xenbus_map_ring_valloc(be->dev, &rx_ring_ref, 1);
 	if (IS_ERR(area)) {
 		err = PTR_ERR(area);
 		goto err_rx;
--- 12.3.orig/drivers/xen/scsiback/interface.c	2013-06-24 16:37:47.000000000 +0200
+++ 12.3/drivers/xen/scsiback/interface.c	2013-06-24 16:52:26.000000000 +0200
@@ -73,7 +73,7 @@ int scsiback_init_sring(struct vscsibk_i
 		return -1;
 	}
 
-	area = xenbus_map_ring_valloc(info->dev, ring_ref);
+	area = xenbus_map_ring_valloc(info->dev, &ring_ref, 1);
 	if (IS_ERR(area))
 		return PTR_ERR(area);
 	info->ring_area = area;
--- 12.3.orig/drivers/xen/tpmback/interface.c	2011-04-11 15:00:49.000000000 +0200
+++ 12.3/drivers/xen/tpmback/interface.c	2011-10-10 11:58:47.000000000 +0200
@@ -88,7 +88,7 @@ int tpmif_map(tpmif_t *tpmif, grant_ref_
 	if (tpmif->irq)
 		return 0;
 
-	area = xenbus_map_ring_valloc(tpmif->bi->dev, ring_ref);
+	area = xenbus_map_ring_valloc(tpmif->bi->dev, &ring_ref, 1);
 	if (IS_ERR(area))
 		return PTR_ERR(area);
 	tpmif->tx_area = area;
--- 12.3.orig/drivers/xen/usbback/interface.c	2013-06-07 10:13:37.000000000 +0200
+++ 12.3/drivers/xen/usbback/interface.c	2013-06-24 16:52:29.000000000 +0200
@@ -114,11 +114,11 @@ int usbif_map(usbif_t *usbif, grant_ref_
 	if (usbif->irq)
 		return 0;
 
-	area = xenbus_map_ring_valloc(usbif->xbdev, urb_ring_ref);
+	area = xenbus_map_ring_valloc(usbif->xbdev, &urb_ring_ref, 1);
 	if (IS_ERR(area))
 		return PTR_ERR(area);
 	usbif->urb_ring_area = area;
-	area = xenbus_map_ring_valloc(usbif->xbdev, conn_ring_ref);
+	area = xenbus_map_ring_valloc(usbif->xbdev, &conn_ring_ref, 1);
 	if (IS_ERR(area)) {
 		err = PTR_ERR(area);
 		goto fail_alloc;
--- 12.3.orig/drivers/xen/xen-pciback/xenbus.c	2012-02-21 11:40:18.000000000 +0100
+++ 12.3/drivers/xen/xen-pciback/xenbus.c	2012-01-20 15:09:09.000000000 +0100
@@ -170,7 +170,7 @@ static int xen_pcibk_do_attach(struct xe
 	err = xenbus_map_ring_valloc(pdev->xdev, gnt_ref, &vaddr);
 	if (err < 0) {
 #else
-	area = xenbus_map_ring_valloc(pdev->xdev, gnt_ref);
+	area = xenbus_map_ring_valloc(pdev->xdev, &gnt_ref, 1);
 	if (IS_ERR(area)) {
 		err = PTR_ERR(area);
 #endif
--- 12.3.orig/drivers/xen/xenbus/xenbus_backend_client.c	2011-11-28 10:42:02.000000000 +0100
+++ 12.3/drivers/xen/xenbus/xenbus_backend_client.c	2011-11-21 17:13:34.000000000 +0100
@@ -32,36 +32,88 @@
 
 #include <linux/err.h>
 #include <linux/module.h>
+#include <linux/slab.h>
 #include <linux/vmalloc.h>
 #include <xen/gnttab.h>
 #include <xen/xenbus.h>
 
+static int unmap_ring_vfree(struct xenbus_device *dev, struct vm_struct *area,
+			    unsigned int nr, grant_handle_t handles[])
+{
+	unsigned int i;
+	int err = 0;
+
+	for (i = 0; i < nr; ++i) {
+		struct gnttab_unmap_grant_ref op;
+
+		gnttab_set_unmap_op(&op,
+				    (unsigned long)area->addr + i * PAGE_SIZE,
+				    GNTMAP_host_map, handles[i]);
+
+		if (HYPERVISOR_grant_table_op(GNTTABOP_unmap_grant_ref,
+					      &op, 1))
+			BUG();
+		if (op.status == GNTST_okay)
+			continue;
+
+		xenbus_dev_error(dev, op.status,
+				 "unmapping page %u (handle %#x)",
+				 i, handles[i]);
+		err = -EINVAL;
+	}
+
+	if (!err) {
+		free_vm_area(area);
+		kfree(handles);
+	}
+
+	return err;
+}
+
 /* Based on Rusty Russell's skeleton driver's map_page */
-struct vm_struct *xenbus_map_ring_valloc(struct xenbus_device *dev, grant_ref_t gnt_ref)
+struct vm_struct *xenbus_map_ring_valloc(struct xenbus_device *dev,
+					 const grant_ref_t refs[],
+					 unsigned int nr)
 {
-	struct gnttab_map_grant_ref op;
+	grant_handle_t *handles = kmalloc(nr * sizeof(*handles), GFP_KERNEL);
 	struct vm_struct *area;
+	unsigned int i;
 
-	area = alloc_vm_area(PAGE_SIZE, NULL);
-	if (!area)
+	if (!handles)
 		return ERR_PTR(-ENOMEM);
 
-	gnttab_set_map_op(&op, (unsigned long)area->addr, GNTMAP_host_map,
-			  gnt_ref, dev->otherend_id);
+	area = alloc_vm_area(nr * PAGE_SIZE, NULL);
+	if (!area) {
+		kfree(handles);
+		return ERR_PTR(-ENOMEM);
+	}
+
+	for (i = 0; i < nr; ++i) {
+		struct gnttab_map_grant_ref op;
+
+		gnttab_set_map_op(&op,
+				  (unsigned long)area->addr + i * PAGE_SIZE,
+				  GNTMAP_host_map, refs[i],
+				  dev->otherend_id);
 	
-	gnttab_check_GNTST_eagain_do_while(GNTTABOP_map_grant_ref, &op);
+		gnttab_check_GNTST_eagain_do_while(GNTTABOP_map_grant_ref,
+						   &op);
 
-	if (op.status != GNTST_okay) {
-		free_vm_area(area);
+		if (op.status == GNTST_okay) {
+			handles[i] = op.handle;
+			continue;
+		}
+
+		unmap_ring_vfree(dev, area, i, handles);
 		xenbus_dev_fatal(dev, op.status,
-				 "mapping in shared page %d from domain %d",
-				 gnt_ref, dev->otherend_id);
+				 "mapping page %u (ref %#x, dom%d)",
+				 i, refs[i], dev->otherend_id);
 		BUG_ON(!IS_ERR(ERR_PTR(op.status)));
 		return ERR_PTR(-EINVAL);
 	}
 
-	/* Stuff the handle in an unused field */
-	area->phys_addr = (unsigned long)op.handle;
+	/* Stuff the handle array in an unused field. */
+	area->phys_addr = (unsigned long)handles;
 
 	return area;
 }
@@ -71,22 +123,9 @@ EXPORT_SYMBOL_GPL(xenbus_map_ring_valloc
 /* Based on Rusty Russell's skeleton driver's unmap_page */
 int xenbus_unmap_ring_vfree(struct xenbus_device *dev, struct vm_struct *area)
 {
-	struct gnttab_unmap_grant_ref op;
-
-	gnttab_set_unmap_op(&op, (unsigned long)area->addr, GNTMAP_host_map,
-			    (grant_handle_t)area->phys_addr);
-
-	if (HYPERVISOR_grant_table_op(GNTTABOP_unmap_grant_ref, &op, 1))
-		BUG();
-
-	if (op.status == GNTST_okay)
-		free_vm_area(area);
-	else
-		xenbus_dev_error(dev, op.status,
-				 "unmapping page at handle %d error %d",
-				 (int16_t)area->phys_addr, op.status);
-
-	return op.status == GNTST_okay ? 0 : -EINVAL;
+	return unmap_ring_vfree(dev, area,
+				get_vm_area_size(area) >> PAGE_SHIFT,
+				(void *)(unsigned long)area->phys_addr);
 }
 EXPORT_SYMBOL_GPL(xenbus_unmap_ring_vfree);
 
--- 12.3.orig/drivers/xen/xenbus/xenbus_client.c	2012-10-29 17:13:41.000000000 +0100
+++ 12.3/drivers/xen/xenbus/xenbus_client.c	2012-03-09 09:01:57.000000000 +0100
@@ -382,6 +382,30 @@ int xenbus_grant_ring(struct xenbus_devi
 }
 EXPORT_SYMBOL_GPL(xenbus_grant_ring);
 
+int xenbus_multi_grant_ring(struct xenbus_device *dev, unsigned int nr,
+			    struct page *pages[], grant_ref_t refs[])
+{
+	unsigned int i;
+	int err = -EINVAL;
+
+	for (i = 0; i < nr; ++i) {
+		unsigned long pfn = page_to_pfn(pages[i]);
+
+		err = gnttab_grant_foreign_access(dev->otherend_id,
+						  pfn_to_mfn(pfn), 0);
+		if (err < 0) {
+			xenbus_dev_fatal(dev, err,
+					 "granting access to ring page #%u",
+					 i);
+			break;
+		}
+		refs[i] = err;
+	}
+
+	return err;
+}
+EXPORT_SYMBOL_GPL(xenbus_multi_grant_ring);
+
 
 /**
  * Allocate an event channel for the given xenbus_device, assigning the newly
--- 12.3.orig/include/xen/gnttab.h	2012-06-08 11:26:50.000000000 +0200
+++ 12.3/include/xen/gnttab.h	2012-06-08 11:30:00.000000000 +0200
@@ -72,6 +72,8 @@ int gnttab_end_foreign_access_ref(grant_
  * some time later.  page may be 0, in which case no freeing will occur.
  */
 void gnttab_end_foreign_access(grant_ref_t ref, unsigned long page);
+void gnttab_multi_end_foreign_access(unsigned int nr, grant_ref_t [],
+				     struct page *[]);
 
 int gnttab_grant_foreign_transfer(domid_t domid, unsigned long pfn);
 
--- 12.3.orig/include/xen/xenbus.h	2012-04-11 13:26:23.000000000 +0200
+++ 12.3/include/xen/xenbus.h	2012-03-09 09:01:51.000000000 +0100
@@ -258,6 +258,9 @@ int xenbus_switch_state(struct xenbus_de
  */
 int xenbus_grant_ring(struct xenbus_device *dev, unsigned long ring_mfn);
 
+int xenbus_multi_grant_ring(struct xenbus_device *, unsigned int nr,
+			    struct page *[], grant_ref_t []);
+
 /**
  * Map a page of memory into this domain from another domain's grant table.
  * xenbus_map_ring_valloc allocates a page of virtual address space, maps the
@@ -268,7 +271,8 @@ int xenbus_grant_ring(struct xenbus_devi
  */
 #if defined(CONFIG_XEN) || defined(HAVE_XEN_PLATFORM_COMPAT_H)
 struct vm_struct *xenbus_map_ring_valloc(struct xenbus_device *dev,
-					 grant_ref_t ref);
+					 const grant_ref_t refs[],
+					 unsigned int nr_refs);
 #else
 int xenbus_map_ring_valloc(struct xenbus_device *dev,
 			   grant_ref_t gnt_ref, void **vaddr);
