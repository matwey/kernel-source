From e6ec716f0ddbe51741ef261d0804f0c28038dda4 Mon Sep 17 00:00:00 2001
From: Miao Xie <miaox@cn.fujitsu.com>
Date: Thu, 17 Jan 2013 05:38:51 +0000
Subject: Btrfs: make raid attr array more readable
Git-commit: e6ec716f0ddbe51741ef261d0804f0c28038dda4
Patch-mainline: v3.9-rc1

The current code of raid attr arry is hard to understand and it is easy to
introduce some problem if we modify the array. So I changed it and made it
more readable.

Cc: Liu Bo <bo.li.liu@oracle.com>
Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
Signed-off-by: Josef Bacik <jbacik@fusionio.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/btrfs/ctree.h       |   12 +++++++-
 fs/btrfs/extent-tree.c |   26 +++++++----------
 fs/btrfs/volumes.c     |   71 ++++++++++++++++++++++++++++++++++++++-----------
 3 files changed, 78 insertions(+), 31 deletions(-)

--- a/fs/btrfs/ctree.h	2013-07-11 17:38:39.517462371 -0400
+++ b/fs/btrfs/ctree.h	2013-07-11 17:39:15.073564531 -0400
@@ -957,7 +957,17 @@ struct btrfs_dev_replace_item {
 #define BTRFS_BLOCK_GROUP_RAID5    (1 << 7)
 #define BTRFS_BLOCK_GROUP_RAID6    (1 << 8)
 #define BTRFS_BLOCK_GROUP_RESERVED	BTRFS_AVAIL_ALLOC_BIT_SINGLE
-#define BTRFS_NR_RAID_TYPES		7
+
+enum btrfs_raid_types {
+	BTRFS_RAID_RAID10,
+	BTRFS_RAID_RAID1,
+	BTRFS_RAID_DUP,
+	BTRFS_RAID_RAID0,
+	BTRFS_RAID_SINGLE,
+	BTRFS_RAID_RAID5,
+	BTRFS_RAID_RAID6,
+	BTRFS_NR_RAID_TYPES
+};
 
 #define BTRFS_BLOCK_GROUP_TYPE_MASK	(BTRFS_BLOCK_GROUP_DATA |    \
 					 BTRFS_BLOCK_GROUP_SYSTEM |  \
--- a/fs/btrfs/extent-tree.c	2013-07-11 17:38:39.525462394 -0400
+++ b/fs/btrfs/extent-tree.c	2013-07-11 17:39:15.077564543 -0400
@@ -5613,23 +5613,19 @@ wait_block_group_cache_done(struct btrfs
 
 int __get_raid_index(u64 flags)
 {
-	int index;
-
 	if (flags & BTRFS_BLOCK_GROUP_RAID10)
-		index = 0;
+		return BTRFS_RAID_RAID10;
 	else if (flags & BTRFS_BLOCK_GROUP_RAID1)
-		index = 1;
+		return BTRFS_RAID_RAID1;
 	else if (flags & BTRFS_BLOCK_GROUP_DUP)
-		index = 2;
+		return BTRFS_RAID_DUP;
 	else if (flags & BTRFS_BLOCK_GROUP_RAID0)
-		index = 3;
+		return BTRFS_RAID_RAID0;
 	else if (flags & BTRFS_BLOCK_GROUP_RAID5)
-		index = 5;
+		return BTRFS_RAID_RAID5;
 	else if (flags & BTRFS_BLOCK_GROUP_RAID6)
-		index = 6;
-	else
-		index = 4; /* BTRFS_BLOCK_GROUP_SINGLE */
-	return index;
+		return BTRFS_RAID_RAID6;
+	return BTRFS_RAID_SINGLE;
 }
 
 static int get_block_group_index(struct btrfs_block_group_cache *cache)
@@ -7598,16 +7594,16 @@ int btrfs_can_relocate(struct btrfs_root
 		index = get_block_group_index(block_group);
 	}
 
-	if (index == 0) {
+	if (index == BTRFS_RAID_RAID10) {
 		dev_min = 4;
 		/* Divide by 2 */
 		min_free >>= 1;
-	} else if (index == 1) {
+	} else if (index == BTRFS_RAID_RAID1) {
 		dev_min = 2;
-	} else if (index == 2) {
+	} else if (index == BTRFS_RAID_DUP) {
 		/* Multiply by 2 */
 		min_free <<= 1;
-	} else if (index == 3) {
+	} else if (index == BTRFS_RAID_RAID0) {
 		dev_min = fs_devices->rw_devices;
 		do_div(min_free, dev_min);
 	}
--- a/fs/btrfs/volumes.c	2013-07-11 17:38:39.533462417 -0400
+++ b/fs/btrfs/volumes.c	2013-07-11 17:39:15.077564543 -0400
@@ -3592,21 +3592,62 @@ static int btrfs_cmp_device_info(const v
 }
 
 struct btrfs_raid_attr btrfs_raid_array[BTRFS_NR_RAID_TYPES] = {
-	/*
-	 * sub_stripes info for map,
-	 * dev_stripes -- stripes per dev, 2 for DUP, 1 other wise
-	 * devs_max -- max devices per stripe, 0 for unlimited
-	 * devs_min -- min devices per stripe
-	 * devs_increment -- ndevs must be a multiple of this
-	 * ncopies -- how many copies of the data we have
-	 */
-	{ 2, 1, 0, 4, 2, 2 /* raid10 */ },
-	{ 1, 1, 2, 2, 2, 2 /* raid1 */ },
-	{ 1, 2, 1, 1, 1, 2 /* dup */ },
-	{ 1, 1, 0, 2, 1, 1 /* raid0 */ },
-	{ 1, 1, 1, 1, 1, 1 /* single */ },
-	{ 1, 1, 0, 2, 1, 2 /* raid5 */ },
-	{ 1, 1, 0, 3, 1, 3 /* raid6 */ },
+	[BTRFS_RAID_RAID10] = {
+		.sub_stripes	= 2,
+		.dev_stripes	= 1,
+		.devs_max	= 0,	/* 0 == as many as possible */
+		.devs_min	= 4,
+		.devs_increment	= 2,
+		.ncopies	= 2,
+	},
+	[BTRFS_RAID_RAID1] = {
+		.sub_stripes	= 1,
+		.dev_stripes	= 1,
+		.devs_max	= 2,
+		.devs_min	= 2,
+		.devs_increment	= 2,
+		.ncopies	= 2,
+	},
+	[BTRFS_RAID_DUP] = {
+		.sub_stripes	= 1,
+		.dev_stripes	= 2,
+		.devs_max	= 1,
+		.devs_min	= 1,
+		.devs_increment	= 1,
+		.ncopies	= 2,
+	},
+	[BTRFS_RAID_RAID0] = {
+		.sub_stripes	= 1,
+		.dev_stripes	= 1,
+		.devs_max	= 0,
+		.devs_min	= 2,
+		.devs_increment	= 1,
+		.ncopies	= 1,
+	},
+	[BTRFS_RAID_SINGLE] = {
+		.sub_stripes	= 1,
+		.dev_stripes	= 1,
+		.devs_max	= 1,
+		.devs_min	= 1,
+		.devs_increment	= 1,
+		.ncopies	= 1,
+	},
+	[BTRFS_RAID_RAID5] = {
+		.sub_stripes	= 1,
+		.dev_stripes	= 1,
+		.devs_max	= 0,
+		.devs_min	= 2,
+		.devs_increment	= 1,
+		.ncopies	= 2,
+	},
+	[BTRFS_RAID_RAID6] = {
+		.sub_stripes	= 1,
+		.dev_stripes	= 1,
+		.devs_max	= 0,
+		.devs_min	= 3,
+		.devs_increment	= 1,
+		.ncopies	= 3,
+	},
 };
 
 static u32 find_raid56_stripe_len(u32 data_devices, u32 dev_stripe_target)
